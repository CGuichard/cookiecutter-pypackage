[build-system]
{% if cookiecutter.version == "pyproject" -%}
requires = ["hatchling >= 1.27.0"]
{% elif cookiecutter.version == "vcs" -%}
requires = ["hatchling >= 1.27.0", "hatch-vcs >= 0.5.0"]
{% endif -%}
build-backend = "hatchling.build"

# -----------------------------------------------
# Package infos

[project]
name = "{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.description }}"
{% if cookiecutter.version == "pyproject" -%}
version = "0.0.0"
{% endif -%}
authors = [
    { name = "{{ cookiecutter.author }}"{%- if cookiecutter.email %}, email = "{{ cookiecutter.email }}"{% endif %} },
]
readme = "README.md"
license = "{{ cookiecutter.license }}"
license-files = ["LICENSE" {%- if cookiecutter.license=='Apache-2.0' %}, "NOTICE" {%- endif %}]
requires-python = ">={{ cookiecutter.python_min }}"
keywords = []
classifiers = [
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    {%- if cookiecutter.python_min == "3.10" %}
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    {% elif cookiecutter.python_min == "3.11" %}
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    {% elif cookiecutter.python_min == "3.12" %}
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    {% elif cookiecutter.python_min == "3.13" %}
    "Programming Language :: Python :: 3.13",
    {% endif -%}
    "Programming Language :: Python :: Implementation :: CPython",
    "License :: OSI Approved :: {% if cookiecutter.license == 'GPL-3.0' %}GNU General Public License v3 (GPLv3){% elif cookiecutter.license == 'MIT' %}MIT License{% elif cookiecutter.license=='Apache-2.0' %}Apache Software License{% endif %}",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Version Control :: Git",
    "Typing :: Typed",
]
{%- if cookiecutter.cli %}
dependencies = [
    "click~=8.2",
]
{%- else %}
dependencies = []
{%- endif %}
{%- if cookiecutter.version == "vcs" %}
dynamic = ["version"]
{%- endif %}

{% if cookiecutter.cli -%}
[project.scripts]
{{ cookiecutter.project_slug }} = "{{ cookiecutter.pkg_name }}._cli:main"

{% endif -%}
[project.urls]
"Homepage" = "{{ cookiecutter.__git_repo }}"
"Source" = "{{ cookiecutter.__git_repo }}"
"Bug Tracker" = "{{ cookiecutter.__git_repo }}/issues"

# -----------------------------------------------
# Development dependencies

[dependency-groups]
dev = [
    "build~=1.3",
    "commitizen==4.9.1",
    "pre-commit~=4.3",
    "pre-commit-uv",
    "rich~=14.1", # Script watch.py
    "tox~=4.30",
    "tox-uv",
    "watchdog~=6.0", # Script watch.py
]
lint = [
    "mypy==1.17",
    "ruff==0.13.0",
]
test = [
    "pytest-cov~=7.0",
    "pytest-html~=4.1",
    "pytest-randomly~=4.0", # Randomize testing order
    "pytest-sugar~=1.1", # Better output
    "pytest~=8.4",
]
docs = [
    "mike~=2.1",
    "mkdocs-click~=0.9", # CLI reference
    "mkdocs-gen-files~=0.5", # API reference
    "mkdocs-literate-nav~=0.6", # API reference
    "mkdocs-material~=9.6",
    "mkdocs-section-index~=0.3",
    "mkdocstrings~=0.30", # API reference
    "mkdocstrings-python~=1.18", # API reference
    "mkdocs~=1.6",
    "ruff==0.13.0", # API reference - code formatting
    "termynal~=0.13", # Animated terminals
]

# -----------------------------------------------
# Build & Packaging

[tool.hatch.build]
skip-excluded-dirs = true

{% if cookiecutter.version == "vcs" -%}
[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0"

[tool.hatch.version.raw-options]
version_scheme = "python-simplified-semver"

{% endif -%}
# -----------------------------------------------
# Linters

[tool.mypy]
strict = true
show_error_context = true
show_column_numbers = true
pretty = true
exclude = ["scripts", "tests"]

[tool.ruff]
target-version = "py{{ cookiecutter.python_min.replace('.', '') }}"
line-length = 88
extend-exclude = ["scripts"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 72

[tool.ruff.lint]
select = [
    "F", # PyFlakes
    "E", "W", # pycodestyle
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flint
    "PERF", # Perflint
    "FURB", # refurb
    "RUF", # Ruff
    # flake8-* plugins
    "A", "ANN", "ARG", "ASYNC", "B", "BLE", "C4", "COM", "DTZ", "EM", "EXE", "FIX",
    "G", "ICN", "INP", "ISC", "LOG", "PIE", "PT", "PTH", "PYI", "Q", "RET", "RSE",
    "S", "SIM", "SLF", "SLOT", "T10", "T20", "TC", "TD", "TID", "YTT",
]
ignore = [
    "D105", "D107", "D203", "D212", "D417",
    # Formatter compatibility (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
    "W191", "E111", "E114", "E117", "D206", "D300", "Q000", "Q001", "Q002", "Q003",
    "COM812", "COM819", "ISC001", "ISC002",
]

[tool.ruff.lint.extend-per-file-ignores]
"src/*/_cli.py" = ["T201"]
"tests/**" = ["ANN201", "ARG001", "INP001", "PLR0913", "PLR2004", "S101"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pydocstyle]
convention = "google"

# -----------------------------------------------
# Tests

[tool.pytest.ini_options]
minversion = "8.0"
required_plugins = [
    "pytest-cov",
]
testpaths = [
    "src",
    "tests",
]
addopts = [
    "--doctest-modules",
    # pytest-cov
    "--cov=src",
    "--cov-config=pyproject.toml",
    "--cov-report=term-missing",
]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "src/*/__main__.py",
    "tests/*",
]

[tool.coverage.report]
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __str__",
    "def __repr__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]

# -----------------------------------------------
# Others

[tool.commitizen]
{% if cookiecutter.version == "pyproject" -%}
version_provider = "pep621"
{% elif cookiecutter.version == "vcs" -%}
version_provider = "scm"
{% endif -%}
version_scheme = "pep440"
annotated_tag = true
changelog_incremental = true
change_type_order = ["Features", "Bug fixes", "Perf", "Internal"]

[tool.commitizen.change_type_map]
feat = "Features"
fix = "Bug fixes"
perf = "Perf"
refactor = "Internal"
